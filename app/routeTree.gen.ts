/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as ProtectedIndexImport } from './routes/_protected.index'
import { Route as ProtectedSearchQueryImport } from './routes/_protected.search.$query'
import { Route as ProtectedPlaylistsPlaylistIdImport } from './routes/_protected.playlists.$playlistId'
import { Route as ProtectedCollectionTracksImport } from './routes/_protected.collection.tracks'
import { Route as ProtectedArtistsArtistIdImport } from './routes/_protected.artists.$artistId'
import { Route as ProtectedAlbumsAlbumIdImport } from './routes/_protected.albums.$albumId'
import { Route as ProtectedSearchQueryIndexImport } from './routes/_protected.search.$query.index'
import { Route as ProtectedSearchQueryTracksImport } from './routes/_protected.search.$query.tracks'
import { Route as ProtectedSearchQueryPlaylistsImport } from './routes/_protected.search.$query.playlists'
import { Route as ProtectedSearchQueryArtistsImport } from './routes/_protected.search.$query.artists'
import { Route as ProtectedSearchQueryAlbumsImport } from './routes/_protected.search.$query.albums'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedIndexRoute = ProtectedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedSearchQueryRoute = ProtectedSearchQueryImport.update({
  id: '/search/$query',
  path: '/search/$query',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedPlaylistsPlaylistIdRoute =
  ProtectedPlaylistsPlaylistIdImport.update({
    id: '/playlists/$playlistId',
    path: '/playlists/$playlistId',
    getParentRoute: () => ProtectedRoute,
  } as any)

const ProtectedCollectionTracksRoute = ProtectedCollectionTracksImport.update({
  id: '/collection/tracks',
  path: '/collection/tracks',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedArtistsArtistIdRoute = ProtectedArtistsArtistIdImport.update({
  id: '/artists/$artistId',
  path: '/artists/$artistId',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedAlbumsAlbumIdRoute = ProtectedAlbumsAlbumIdImport.update({
  id: '/albums/$albumId',
  path: '/albums/$albumId',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedSearchQueryIndexRoute = ProtectedSearchQueryIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedSearchQueryRoute,
} as any)

const ProtectedSearchQueryTracksRoute = ProtectedSearchQueryTracksImport.update(
  {
    id: '/tracks',
    path: '/tracks',
    getParentRoute: () => ProtectedSearchQueryRoute,
  } as any,
)

const ProtectedSearchQueryPlaylistsRoute =
  ProtectedSearchQueryPlaylistsImport.update({
    id: '/playlists',
    path: '/playlists',
    getParentRoute: () => ProtectedSearchQueryRoute,
  } as any)

const ProtectedSearchQueryArtistsRoute =
  ProtectedSearchQueryArtistsImport.update({
    id: '/artists',
    path: '/artists',
    getParentRoute: () => ProtectedSearchQueryRoute,
  } as any)

const ProtectedSearchQueryAlbumsRoute = ProtectedSearchQueryAlbumsImport.update(
  {
    id: '/albums',
    path: '/albums',
    getParentRoute: () => ProtectedSearchQueryRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_protected/': {
      id: '/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtectedIndexImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/albums/$albumId': {
      id: '/_protected/albums/$albumId'
      path: '/albums/$albumId'
      fullPath: '/albums/$albumId'
      preLoaderRoute: typeof ProtectedAlbumsAlbumIdImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/artists/$artistId': {
      id: '/_protected/artists/$artistId'
      path: '/artists/$artistId'
      fullPath: '/artists/$artistId'
      preLoaderRoute: typeof ProtectedArtistsArtistIdImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/collection/tracks': {
      id: '/_protected/collection/tracks'
      path: '/collection/tracks'
      fullPath: '/collection/tracks'
      preLoaderRoute: typeof ProtectedCollectionTracksImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/playlists/$playlistId': {
      id: '/_protected/playlists/$playlistId'
      path: '/playlists/$playlistId'
      fullPath: '/playlists/$playlistId'
      preLoaderRoute: typeof ProtectedPlaylistsPlaylistIdImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/search/$query': {
      id: '/_protected/search/$query'
      path: '/search/$query'
      fullPath: '/search/$query'
      preLoaderRoute: typeof ProtectedSearchQueryImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/search/$query/albums': {
      id: '/_protected/search/$query/albums'
      path: '/albums'
      fullPath: '/search/$query/albums'
      preLoaderRoute: typeof ProtectedSearchQueryAlbumsImport
      parentRoute: typeof ProtectedSearchQueryImport
    }
    '/_protected/search/$query/artists': {
      id: '/_protected/search/$query/artists'
      path: '/artists'
      fullPath: '/search/$query/artists'
      preLoaderRoute: typeof ProtectedSearchQueryArtistsImport
      parentRoute: typeof ProtectedSearchQueryImport
    }
    '/_protected/search/$query/playlists': {
      id: '/_protected/search/$query/playlists'
      path: '/playlists'
      fullPath: '/search/$query/playlists'
      preLoaderRoute: typeof ProtectedSearchQueryPlaylistsImport
      parentRoute: typeof ProtectedSearchQueryImport
    }
    '/_protected/search/$query/tracks': {
      id: '/_protected/search/$query/tracks'
      path: '/tracks'
      fullPath: '/search/$query/tracks'
      preLoaderRoute: typeof ProtectedSearchQueryTracksImport
      parentRoute: typeof ProtectedSearchQueryImport
    }
    '/_protected/search/$query/': {
      id: '/_protected/search/$query/'
      path: '/'
      fullPath: '/search/$query/'
      preLoaderRoute: typeof ProtectedSearchQueryIndexImport
      parentRoute: typeof ProtectedSearchQueryImport
    }
  }
}

// Create and export the route tree

interface ProtectedSearchQueryRouteChildren {
  ProtectedSearchQueryAlbumsRoute: typeof ProtectedSearchQueryAlbumsRoute
  ProtectedSearchQueryArtistsRoute: typeof ProtectedSearchQueryArtistsRoute
  ProtectedSearchQueryPlaylistsRoute: typeof ProtectedSearchQueryPlaylistsRoute
  ProtectedSearchQueryTracksRoute: typeof ProtectedSearchQueryTracksRoute
  ProtectedSearchQueryIndexRoute: typeof ProtectedSearchQueryIndexRoute
}

const ProtectedSearchQueryRouteChildren: ProtectedSearchQueryRouteChildren = {
  ProtectedSearchQueryAlbumsRoute: ProtectedSearchQueryAlbumsRoute,
  ProtectedSearchQueryArtistsRoute: ProtectedSearchQueryArtistsRoute,
  ProtectedSearchQueryPlaylistsRoute: ProtectedSearchQueryPlaylistsRoute,
  ProtectedSearchQueryTracksRoute: ProtectedSearchQueryTracksRoute,
  ProtectedSearchQueryIndexRoute: ProtectedSearchQueryIndexRoute,
}

const ProtectedSearchQueryRouteWithChildren =
  ProtectedSearchQueryRoute._addFileChildren(ProtectedSearchQueryRouteChildren)

interface ProtectedRouteChildren {
  ProtectedIndexRoute: typeof ProtectedIndexRoute
  ProtectedAlbumsAlbumIdRoute: typeof ProtectedAlbumsAlbumIdRoute
  ProtectedArtistsArtistIdRoute: typeof ProtectedArtistsArtistIdRoute
  ProtectedCollectionTracksRoute: typeof ProtectedCollectionTracksRoute
  ProtectedPlaylistsPlaylistIdRoute: typeof ProtectedPlaylistsPlaylistIdRoute
  ProtectedSearchQueryRoute: typeof ProtectedSearchQueryRouteWithChildren
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedIndexRoute: ProtectedIndexRoute,
  ProtectedAlbumsAlbumIdRoute: ProtectedAlbumsAlbumIdRoute,
  ProtectedArtistsArtistIdRoute: ProtectedArtistsArtistIdRoute,
  ProtectedCollectionTracksRoute: ProtectedCollectionTracksRoute,
  ProtectedPlaylistsPlaylistIdRoute: ProtectedPlaylistsPlaylistIdRoute,
  ProtectedSearchQueryRoute: ProtectedSearchQueryRouteWithChildren,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof ProtectedRouteWithChildren
  '/login': typeof LoginRoute
  '/': typeof ProtectedIndexRoute
  '/albums/$albumId': typeof ProtectedAlbumsAlbumIdRoute
  '/artists/$artistId': typeof ProtectedArtistsArtistIdRoute
  '/collection/tracks': typeof ProtectedCollectionTracksRoute
  '/playlists/$playlistId': typeof ProtectedPlaylistsPlaylistIdRoute
  '/search/$query': typeof ProtectedSearchQueryRouteWithChildren
  '/search/$query/albums': typeof ProtectedSearchQueryAlbumsRoute
  '/search/$query/artists': typeof ProtectedSearchQueryArtistsRoute
  '/search/$query/playlists': typeof ProtectedSearchQueryPlaylistsRoute
  '/search/$query/tracks': typeof ProtectedSearchQueryTracksRoute
  '/search/$query/': typeof ProtectedSearchQueryIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/': typeof ProtectedIndexRoute
  '/albums/$albumId': typeof ProtectedAlbumsAlbumIdRoute
  '/artists/$artistId': typeof ProtectedArtistsArtistIdRoute
  '/collection/tracks': typeof ProtectedCollectionTracksRoute
  '/playlists/$playlistId': typeof ProtectedPlaylistsPlaylistIdRoute
  '/search/$query/albums': typeof ProtectedSearchQueryAlbumsRoute
  '/search/$query/artists': typeof ProtectedSearchQueryArtistsRoute
  '/search/$query/playlists': typeof ProtectedSearchQueryPlaylistsRoute
  '/search/$query/tracks': typeof ProtectedSearchQueryTracksRoute
  '/search/$query': typeof ProtectedSearchQueryIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/login': typeof LoginRoute
  '/_protected/': typeof ProtectedIndexRoute
  '/_protected/albums/$albumId': typeof ProtectedAlbumsAlbumIdRoute
  '/_protected/artists/$artistId': typeof ProtectedArtistsArtistIdRoute
  '/_protected/collection/tracks': typeof ProtectedCollectionTracksRoute
  '/_protected/playlists/$playlistId': typeof ProtectedPlaylistsPlaylistIdRoute
  '/_protected/search/$query': typeof ProtectedSearchQueryRouteWithChildren
  '/_protected/search/$query/albums': typeof ProtectedSearchQueryAlbumsRoute
  '/_protected/search/$query/artists': typeof ProtectedSearchQueryArtistsRoute
  '/_protected/search/$query/playlists': typeof ProtectedSearchQueryPlaylistsRoute
  '/_protected/search/$query/tracks': typeof ProtectedSearchQueryTracksRoute
  '/_protected/search/$query/': typeof ProtectedSearchQueryIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/'
    | '/albums/$albumId'
    | '/artists/$artistId'
    | '/collection/tracks'
    | '/playlists/$playlistId'
    | '/search/$query'
    | '/search/$query/albums'
    | '/search/$query/artists'
    | '/search/$query/playlists'
    | '/search/$query/tracks'
    | '/search/$query/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/'
    | '/albums/$albumId'
    | '/artists/$artistId'
    | '/collection/tracks'
    | '/playlists/$playlistId'
    | '/search/$query/albums'
    | '/search/$query/artists'
    | '/search/$query/playlists'
    | '/search/$query/tracks'
    | '/search/$query'
  id:
    | '__root__'
    | '/_protected'
    | '/login'
    | '/_protected/'
    | '/_protected/albums/$albumId'
    | '/_protected/artists/$artistId'
    | '/_protected/collection/tracks'
    | '/_protected/playlists/$playlistId'
    | '/_protected/search/$query'
    | '/_protected/search/$query/albums'
    | '/_protected/search/$query/artists'
    | '/_protected/search/$query/playlists'
    | '/_protected/search/$query/tracks'
    | '/_protected/search/$query/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_protected",
        "/login"
      ]
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/",
        "/_protected/albums/$albumId",
        "/_protected/artists/$artistId",
        "/_protected/collection/tracks",
        "/_protected/playlists/$playlistId",
        "/_protected/search/$query"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_protected/": {
      "filePath": "_protected.index.tsx",
      "parent": "/_protected"
    },
    "/_protected/albums/$albumId": {
      "filePath": "_protected.albums.$albumId.tsx",
      "parent": "/_protected"
    },
    "/_protected/artists/$artistId": {
      "filePath": "_protected.artists.$artistId.tsx",
      "parent": "/_protected"
    },
    "/_protected/collection/tracks": {
      "filePath": "_protected.collection.tracks.tsx",
      "parent": "/_protected"
    },
    "/_protected/playlists/$playlistId": {
      "filePath": "_protected.playlists.$playlistId.tsx",
      "parent": "/_protected"
    },
    "/_protected/search/$query": {
      "filePath": "_protected.search.$query.tsx",
      "parent": "/_protected",
      "children": [
        "/_protected/search/$query/albums",
        "/_protected/search/$query/artists",
        "/_protected/search/$query/playlists",
        "/_protected/search/$query/tracks",
        "/_protected/search/$query/"
      ]
    },
    "/_protected/search/$query/albums": {
      "filePath": "_protected.search.$query.albums.tsx",
      "parent": "/_protected/search/$query"
    },
    "/_protected/search/$query/artists": {
      "filePath": "_protected.search.$query.artists.tsx",
      "parent": "/_protected/search/$query"
    },
    "/_protected/search/$query/playlists": {
      "filePath": "_protected.search.$query.playlists.tsx",
      "parent": "/_protected/search/$query"
    },
    "/_protected/search/$query/tracks": {
      "filePath": "_protected.search.$query.tracks.tsx",
      "parent": "/_protected/search/$query"
    },
    "/_protected/search/$query/": {
      "filePath": "_protected.search.$query.index.tsx",
      "parent": "/_protected/search/$query"
    }
  }
}
ROUTE_MANIFEST_END */
